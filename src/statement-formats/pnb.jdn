{:entries {:grammar {:date (group (if (sequence :dd :/ :mm)
                                    (sequence
                                     (constant :type/date)
                                     (capture :dd)
                                     :/
                                       (capture :mm))))
                     :space-or-tab (set " \t")
                     :amount :financial-figure
                     :reference-number (some :d)
                     :non-space-whitespace (set "\t\r\n\0\f\v")
                     :ascii-with-space (if-not :non-space-whitespace 1)
                     :country-code (sequence :a :a :a)
                     :payment-entry (sequence
                                     :date
                                       (some :space-or-tab)
                                       :date
                                       (some :space-or-tab)
                                       (capture :reference-number)
                                       (some :space-or-tab)
                                       (capture :simple-phrase)
                                       (constant nil)
                                       (constant nil)
                                       (some :space-or-tab)
                                       (accumulate
                                        (sequence
                                         (constant "-")
                                         (capture :amount)))
                                       :space-or-tab
                                       "CR"
                                       (constant nil))
                     :late-payment-entry (sequence
                                           :date
                                           (some :space-or-tab)
                                           :date
                                           (some :space-or-tab)
                                           (capture :reference-number)
                                           (some :space-or-tab)
                                           (capture "LATE CHARGE DEBIT ADJUSTMENT")
                                           (constant nil)
                                           (constant nil)
                                           (some :space-or-tab)
                                           (capture :amount :amount)
                                           )
                     :simple-entry (sequence
                                    :date
                                      (some :space-or-tab)
                                      :date
                                      (some :space-or-tab)
                                      (capture :reference-number :reference-number)
                                      (some :space-or-tab)
                                      (choice
                                       # For the cases where description and city are so long that only one space separates
                                       # description, city, and country code, such that all get captured as description.
                                       (if (sequence :simple-phrase (some :space-or-tab) :amount)
                                         (capture 22)
                                         )
                                       # For cases where description is so long that only one space separates the description from
                                       # the city column. This means that the city column gets captured as part of the description
                                       # and the rest of the entry doesn't match.
                                       (if (sequence :simple-phrase (some :space-or-tab) :country-code (some :space-or-tab) :amount)
                                         (capture 22)
                                         )
                                       # Even rarer case where both description and city are so long they merge with the country.
                                       # Implementation just captures 22 because it advances that many spaces, and lets the succeeding
                                       # patterns take over.
                                       (if (sequence :simple-phrase (some :space-or-tab) :amount)
                                         (capture 22))
                                       # Captures the expected case.
                                       (if (sequence :simple-phrase (some :space-or-tab) :simple-phrase (some :space-or-tab) :country-code (some :space-or-tab) :amount)
                                         (capture :simple-phrase))
                                       # Captures the case where description is as expected but city and country code have no separation.
                                       (if (sequence :simple-phrase (some :space-or-tab) :simple-phrase (some :space-or-tab) :amount)
                                         (capture :simple-phrase)))
                                      (some :space-or-tab)
                                      (choice
                                       # For cases wherein city spans long enough such that city and country code are treated as one
                                       (if (sequence :simple-phrase (some :space-or-tab) :amount)
                                         (choice
                                          # For cases wherein the city spans long enough such that there is only one space between it and country code.
                                          # This results in the country code being captured as part of the city IF we were to use :simple-phrase.
                                          (sequence
                                           (capture
                                            (sequence (some :S)
                                                      (any (sequence
                                                            :non-newline-whitespace
                                                              (if-not (sequence
                                                                       :country-code
                                                                         (some :space-or-tab)
                                                                         :amount)
                                                                (some :S))))))
                                           (some :space-or-tab)
                                           (capture :country-code)
                                           )
                                          # For cases where the city spans 13 characters,
                                          # leaving no white space to separate city and country code.
                                          # I'm looking at you, NEW YORK CITYUSA and SAN FRANCISCOUSA
                                          (sequence
                                           (capture 13)
                                           (capture :country-code))))

                                       # The expected case
                                       (sequence
                                        (capture :simple-phrase :city)
                                        (some :space-or-tab)
                                        (capture :country-code))
                                       )

                                      (some :space-or-tab)
                                      (capture :amount :amount)
                                      )
                     :multiline-entry (sequence
                                       :simple-entry
                                         :s*
                                         (if-not (choice :simple-entry
                                                    :payment-entry
                                                    "CURRENT BALANCE"
                                                    "- please see next page for continuation of your transaction -")
                                           (capture :simple-phrase)))
                     :entry (thru (group (sequence (constant :type/entry)
                                                   (choice :multiline-entry :simple-entry :payment-entry :late-payment-entry))))
                     :main (thru (some :entry))}
           :group-keys {:type/date [:day :month]
                        :type/entry [:date1 :date2 :refnum :description :city :country :amount :extra-description]}}
 :filename {:grammar {:main (sequence "SOA_"
                                      (group (sequence (constant :type/date)
                                                       (capture :mm)
                                                       (capture :dd)
                                                       (capture :yyyy))))}
            :group-keys {:type/date [:month :day :year]
                         :main [:teller/statement-date]}}}
